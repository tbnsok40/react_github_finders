[{"/Users/imseonghu/PycharmProjects/react_github_finders/src/index.js":"1","/Users/imseonghu/PycharmProjects/react_github_finders/src/reportWebVitals.js":"2","/Users/imseonghu/PycharmProjects/react_github_finders/src/App.js":"3","/Users/imseonghu/PycharmProjects/react_github_finders/src/components/layout/Alert.js":"4","/Users/imseonghu/PycharmProjects/react_github_finders/src/components/users/Users.js":"5","/Users/imseonghu/PycharmProjects/react_github_finders/src/components/pages/About.js":"6","/Users/imseonghu/PycharmProjects/react_github_finders/src/components/users/Search.js":"7","/Users/imseonghu/PycharmProjects/react_github_finders/src/components/users/User.js":"8","/Users/imseonghu/PycharmProjects/react_github_finders/src/components/layout/Navbar.js":"9","/Users/imseonghu/PycharmProjects/react_github_finders/src/components/users/UserItem.js":"10","/Users/imseonghu/PycharmProjects/react_github_finders/src/components/layout/Spinner.js":"11","/Users/imseonghu/PycharmProjects/react_github_finders/src/components/repos/Repos.js":"12","/Users/imseonghu/PycharmProjects/react_github_finders/src/components/repos/RepoItem.js":"13"},{"size":500,"mtime":1614925504044,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1614925504046,"results":"16","hashOfConfig":"15"},{"size":6151,"mtime":1614925504040,"results":"17","hashOfConfig":"15"},{"size":324,"mtime":1614925504041,"results":"18","hashOfConfig":"15"},{"size":4673,"mtime":1614925504043,"results":"19","hashOfConfig":"15"},{"size":216,"mtime":1614925504042,"results":"20","hashOfConfig":"15"},{"size":1730,"mtime":1614925504042,"results":"21","hashOfConfig":"15"},{"size":4010,"mtime":1614925504043,"results":"22","hashOfConfig":"15"},{"size":1629,"mtime":1614925504041,"results":"23","hashOfConfig":"15"},{"size":2579,"mtime":1614925504043,"results":"24","hashOfConfig":"15"},{"size":341,"mtime":1614925504041,"results":"25","hashOfConfig":"15"},{"size":434,"mtime":1614925504042,"results":"26","hashOfConfig":"15"},{"size":335,"mtime":1614925504042,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"e8xuoy",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/imseonghu/PycharmProjects/react_github_finders/src/index.js",[],["58","59"],"/Users/imseonghu/PycharmProjects/react_github_finders/src/reportWebVitals.js",[],"/Users/imseonghu/PycharmProjects/react_github_finders/src/App.js",["60","61"],"import './App.css'; // 여기 상태가 적용된다\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { render } from '@testing-library/react';\nimport Users from './components/users/Users';\nimport User from './components/users/User';\n\nimport Navbar from './components/layout/Navbar';\nimport Search from './components/users/Search';\n// import UserItem from './components/users/UserItem';\nimport React, { Fragment, Component } from 'react';\nimport axios from 'axios';\nimport About from './components/pages/About';\nimport Alert from './components/layout/Alert';\n\n// jsx: js syntax extension\n// class App extends Component {\n// \trender() {\n// \t\t// jsx를 사용하지 않으면 이런식으로 써야하는데 투 복잡\n// \t\t// return React.createElement('div', {className:'App'}, React.createElement('h1',null,\"hello from react\"))\n// \t\tconst name = 'LIM';\n// \t\tconst foo = () => 'Bars'; // return 밖에서 선언해도 된다.(method를 클래스 컴포넌트로 사용)\n\n// \t\tconst loading = false;\n// \t\t// if (loading) {\n// \t\t//   return <h2> Loading ...</h2>\n// \t\t// }\n\n// \t\tconst showName = true;\n\n// \t\t// jsx style 최고\n// \t\treturn (\n// \t\t\t// only one parent element\n// \t\t\t<div className='App'>\n// \t\t\t\t{/* class대신 className */}\n// \t\t\t\t{/* <h1> hello {name.toUpperCase()} from react</h1> */}\n// \t\t\t\t{loading ? <h4>Loading ...</h4> : <h1>Hello {showName && name}</h1>}\n// \t\t\t\t<h2>goodbye {foo()}</h2>\n// \t\t\t</div>\n// \t\t);\n// \t}\n// }\n\nclass App extends Component {\n\tstate = {\n\t\tusers: [],\n\t\tuser: {}, //empty object <- for getUser function\n\t\trepos: [],\n\t\tloading: false,\n\t\talert: null, // 이거 왜 {} 이렇게 비워두면 안되지?\n\t\tfollowers: [],\n\t};\n\n\t// // user api에서 받아온 정보가 검색하지 않아도 불러와있다\n\t// async componentDidMount() {\n\t// \tthis.setState({ loading: true }); // state를 변경하는 방법: setState()\n\t// \t//fetchAPI Axios\n\t// \tconst res = await axios.get('https://api.github.com/users'); // res는 애초에 배열 형태로 저장된다. api가 배열형태이니.\n\t// \tthis.setState({ users: res.data, loading: false });\n\n\t// \t// 이런 방법도 있다.\n\t// \t// componentDidMount(){\n\t// \t// \taxios.get('https://api.github.com/users').then(res => console.log(res.data));\n\t// \t// }\n\t// }\n\n\t// Search Github users\n\tsearchUsers = async (text) => {\n\t\tthis.setState({ loading: true });\n\t\t// 검색 text만 걸려서 나온다.\n\t\tconst res = await axios.get(\n\t\t\t`https://api.github.com/search/users?q=${text}&client_id = ${process.env.REACT_APP_GITHUG_CLIENT_ID}&client_secret = ${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n\t\t);\n\t\tthis.setState({ users: res.data.items, loading: false });\n\t\t// items라는 사전에 정의된 array를 리턴한다\n\t\t// 위의 state에서 users는 이미 배열로 정의해뒀기 때문\n\t};\n\n\t// clear Users from state\n\tclearUsers = () => {\n\t\tthis.setState({ users: [], loading: false });\n\t};\n\n\t// set Alert\n\tsetAlert = (msg, type) => {\n\t\tthis.setState({ alert: { msg, type } });\n\t\tsetTimeout(() => this.setState({ alert: null }), 2500);\n\t};\n\n\t//get single user\n\tgetUser = async (username) => {\n\t\tthis.setState({ loading: true });\n\t\tconst res = await axios.get(\n\t\t\t// ? 를 &로 써서 에러 찾는데 오래걸림\n\t\t\t`https://api.github.com/users/${username}?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret = ${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n\t\t);\n\t\tconst res2 = await axios.get(res.data.followers_url);\n\t\t// console.log(res2.data);\n\t\tthis.setState({\n\t\t\tuser: res.data,\n\t\t\tloading: false,\n\t\t\tfollowers: res2.data,\n\t\t});\n\t};\n\n\tgetUserRepos = async (username) => {\n\t\tthis.setState({\n\t\t\tloading: true,\n\t\t});\n\t\tconst res = await axios.get(\n\t\t\t// ? 를 &로 써서 에러 찾는데 오래걸림\n\t\t\t`https://api.github.com/users/${username}/repos?per_page=10&sort=created:asc&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret = ${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n\t\t); //?per_page=10 : 필요에 의해 지울수도 있다.\n\t\tthis.setState({ repos: res.data, loading: false });\n\t};\n\n\trender() {\n\t\tconst { users, loading, user, repos, followers } = this.state;\n\t\t// console.log(followers);\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t{/* // 라우터로 다 감싸야한다. */}\n\t\t\t\t<div className='App'>\n\t\t\t\t\t<Navbar title='LikeLion PNU Github Finder' icon='fab fa-github' />\n\t\t\t\t\t{/* <UserItem /> */}\n\t\t\t\t\t{/* UserItem을 주석처리해놔도, Users로 컴포넌트를 던져놨기에 UserItem에서 정의한 내용을 사용할 수 있다 */}\n\t\t\t\t\t<div className='container'>\n\t\t\t\t\t\t<Alert alert={this.state.alert} />\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t{/* keep multiple components in Swich */}\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\texact\n\t\t\t\t\t\t\t\tpath='/'\n\t\t\t\t\t\t\t\trender={(props) => (\n\t\t\t\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t\t\t\t<Search\n\t\t\t\t\t\t\t\t\t\t\tsearchUsers={this.searchUsers}\n\t\t\t\t\t\t\t\t\t\t\tclearUsers={this.clearUsers}\n\t\t\t\t\t\t\t\t\t\t\tshowClear={users.length > 0 ? true : false}\n\t\t\t\t\t\t\t\t\t\t\tsetAlert={this.setAlert}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t{/* this.searchUser는 결국 text일 뿐 */}\n\t\t\t\t\t\t\t\t\t\t<Users loading_p={loading} users_p={users} />\n\t\t\t\t\t\t\t\t\t\t{/* grid system */}\n\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t{/* <Route exact path='/about' component={About} />  this is just sample of Route  */}\n\t\t\t\t\t\t\t{/* Captial C is not working for component */}\n\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\texact\n\t\t\t\t\t\t\t\tpath='/user/:login' // 콜론 왜 붙지? 애초에 이 path의 용도가 뭐야 => User.js의 8 line\n\t\t\t\t\t\t\t\trender={(props) => (\n\t\t\t\t\t\t\t\t\t<User\n\t\t\t\t\t\t\t\t\t\t{...props} // 얘는 뭐야?\n\t\t\t\t\t\t\t\t\t\tgetUser={this.getUser}\n\t\t\t\t\t\t\t\t\t\tgetUserRepos={this.getUserRepos}\n\t\t\t\t\t\t\t\t\t\tuser={user}\n\t\t\t\t\t\t\t\t\t\trepos={repos}\n\t\t\t\t\t\t\t\t\t\tloading={loading}\n\t\t\t\t\t\t\t\t\t\tfollowers2={followers}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\n// class App extends Component {\n// \trender() {\n// \t\tconst name = 'Huge Hoo';\n// \t\tconst hoo = () => '5Gawd';\n// \t\tconst loading = true;\n// \t\tconst showName = true;\n// \t\treturn (\n// \t\t\t<div>\n// \t\t\t\t{!loading ? (\n// \t\t\t\t\t<h1>Loading . . . </h1>\n// \t\t\t\t) : (\n// \t\t\t\t\t<h1>{showName && name.toUpperCase()}</h1>\n// \t\t\t\t)}\n// \t\t\t</div>\n// \t\t);\n// \t}\n// }\n\nexport default App;\n","/Users/imseonghu/PycharmProjects/react_github_finders/src/components/layout/Alert.js",[],"/Users/imseonghu/PycharmProjects/react_github_finders/src/components/users/Users.js",["62"],"import React, { Component } from 'react';\nimport UserItem from './UserItem';\nimport Spinner from '../layout/Spinner';\nimport PropTypes from 'prop-types'; //impt 개꿀티\n\n// export class Users extends Component {\n// \t// state = {\n// \t// \tusers: [\n// \t// \t\t{\n// \t// \t\t\tlogin: 'mojombo',\n// \t// \t\t\tid: 1,\n// \t// \t\t\tnode_id: 'MDQ6VXNlcjE=',\n// \t// \t\t\tavatar_url: 'https://avatars0.githubusercontent.com/u/1?v=4',\n// \t// \t\t\tgravatar_id: '',\n// \t// \t\t\turl: 'https://api.github.com/users/mojombo',\n// \t// \t\t\thtml_url: 'https://github.com/mojombo',\n// \t// \t\t\tfollowers_url: 'https://api.github.com/users/mojombo/followers',\n// \t// \t\t\tfollowing_url:\n// \t// \t\t\t\t'https://api.github.com/users/mojombo/following{/other_user}',\n// \t// \t\t\tgists_url: 'https://api.github.com/users/mojombo/gists{/gist_id}',\n// \t// \t\t\tstarred_url:\n// \t// \t\t\t\t'https://api.github.com/users/mojombo/starred{/owner}{/repo}',\n// \t// \t\t\tsubscriptions_url: 'https://api.github.com/users/mojombo/subscriptions',\n// \t// \t\t\torganizations_url: 'https://api.github.com/users/mojombo/orgs',\n// \t// \t\t\trepos_url: 'https://api.github.com/users/mojombo/repos',\n// \t// \t\t\tevents_url: 'https://api.github.com/users/mojombo/events{/privacy}',\n// \t// \t\t\treceived_events_url:\n// \t// \t\t\t\t'https://api.github.com/users/mojombo/received_events',\n// \t// \t\t\ttype: 'User',\n// \t// \t\t\tsite_admin: false,\n// \t// \t\t},\n// \t// \t\t{\n// \t// \t\t\tlogin: 'defunkt',\n// \t// \t\t\tid: 2,\n// \t// \t\t\tnode_id: 'MDQ6VXNlcjI=',\n// \t// \t\t\tavatar_url: 'https://avatars0.githubusercontent.com/u/2?v=4',\n// \t// \t\t\tgravatar_id: '',\n// \t// \t\t\turl: 'https://api.github.com/users/defunkt',\n// \t// \t\t\thtml_url: 'https://github.com/defunkt',\n// \t// \t\t\tfollowers_url: 'https://api.github.com/users/defunkt/followers',\n// \t// \t\t\tfollowing_url:\n// \t// \t\t\t\t'https://api.github.com/users/defunkt/following{/other_user}',\n// \t// \t\t\tgists_url: 'https://api.github.com/users/defunkt/gists{/gist_id}',\n// \t// \t\t\tstarred_url:\n// \t// \t\t\t\t'https://api.github.com/users/defunkt/starred{/owner}{/repo}',\n// \t// \t\t\tsubscriptions_url: 'https://api.github.com/users/defunkt/subscriptions',\n// \t// \t\t\torganizations_url: 'https://api.github.com/users/defunkt/orgs',\n// \t// \t\t\trepos_url: 'https://api.github.com/users/defunkt/repos',\n// \t// \t\t\tevents_url: 'https://api.github.com/users/defunkt/events{/privacy}',\n// \t// \t\t\treceived_events_url:\n// \t// \t\t\t\t'https://api.github.com/users/defunkt/received_events',\n// \t// \t\t\ttype: 'User',\n// \t// \t\t\tsite_admin: false,\n// \t// \t\t},\n// \t// \t\t{\n// \t// \t\t\tlogin: 'pjhyett',\n// \t// \t\t\tid: 3,\n// \t// \t\t\tnode_id: 'MDQ6VXNlcjM=',\n// \t// \t\t\tavatar_url: 'https://avatars0.githubusercontent.com/u/3?v=4',\n// \t// \t\t\tgravatar_id: '',\n// \t// \t\t\turl: 'https://api.github.com/users/pjhyett',\n// \t// \t\t\thtml_url: 'https://github.com/pjhyett',\n// \t// \t\t\tfollowers_url: 'https://api.github.com/users/pjhyett/followers',\n// \t// \t\t\tfollowing_url:\n// \t// \t\t\t\t'https://api.github.com/users/pjhyett/following{/other_user}',\n// \t// \t\t\tgists_url: 'https://api.github.com/users/pjhyett/gists{/gist_id}',\n// \t// \t\t\tstarred_url:\n// \t// \t\t\t\t'https://api.github.com/users/pjhyett/starred{/owner}{/repo}',\n// \t// \t\t\tsubscriptions_url: 'https://api.github.com/users/pjhyett/subscriptions',\n// \t// \t\t\torganizations_url: 'https://api.github.com/users/pjhyett/orgs',\n// \t// \t\t\trepos_url: 'https://api.github.com/users/pjhyett/repos',\n// \t// \t\t\tevents_url: 'https://api.github.com/users/pjhyett/events{/privacy}',\n// \t// \t\t\treceived_events_url:\n// \t// \t\t\t\t'https://api.github.com/users/pjhyett/received_events',\n// \t// \t\t\ttype: 'User',\n// \t// \t\t\tsite_admin: false,\n// \t// \t\t},\n// \t// \t],\n// \t// };\n// \trender() {\n// \t\treturn (\n// \t\t\t<div style={userStyle}>\n// \t\t\t\t{/* reason why this is single bracet */}\n\n// \t\t\t\t{this.props.users.map((\n// \t\t\t\t\t// 기존까진 api를 이렇게 코드의 states로 저장해서 가져왔다면, api서버를 가져올 땐 props로 바꿔줄 수 있다.\n// \t\t\t\t\t//props <->state\n// \t\t\t\t\tuser // user is property\n// \t\t\t\t) => (\n// \t\t\t\t\t<UserItem key={user.id} user2={user} /> //props get passed like this to UserItem\n// \t\t\t\t))}\n// \t\t\t\t{/* passing the user prop into the UserItem */}\n// \t\t\t</div>\n// \t\t);\n// \t}\n// }\n\nconst Users = ({ users_p, loading_p }) => {\n\tif (loading_p) {\n\t\treturn <Spinner></Spinner>;\n\t} else {\n\t\treturn (\n\t\t\t<div style={userStyle}>\n\t\t\t\t{users_p.map((user) => (\n\t\t\t\t\t<UserItem key={user.id} users_p={user} /> //props get passed like this to UserItem\n\t\t\t\t))}\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nUsers.propTypes = {\n\tusers_p: PropTypes.array.isRequired, //ptar\n\tloading_p: PropTypes.bool.isRequired,\n};\n// grid System\nconst userStyle = {\n\tdisplay: 'grid',\n\tgridTemplateColumns: 'repeat(3,1fr)',\n\tgridGap: '1rem',\n};\nexport default Users;\n","/Users/imseonghu/PycharmProjects/react_github_finders/src/components/pages/About.js",[],"/Users/imseonghu/PycharmProjects/react_github_finders/src/components/users/Search.js",[],"/Users/imseonghu/PycharmProjects/react_github_finders/src/components/users/User.js",[],"/Users/imseonghu/PycharmProjects/react_github_finders/src/components/layout/Navbar.js",[],"/Users/imseonghu/PycharmProjects/react_github_finders/src/components/users/UserItem.js",[],"/Users/imseonghu/PycharmProjects/react_github_finders/src/components/layout/Spinner.js",[],"/Users/imseonghu/PycharmProjects/react_github_finders/src/components/repos/Repos.js",["63"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport RepoItem from './RepoItem';\nexport const Repos = ({ repos }) => {\n\tconst substring = /likelion/;\n\n\treturn repos.map((repo) => (\n\t\t<RepoItem repo={repo} key={repo.id} />\n\t\t// console.log(repo.name),\n\t\t// substring.test(repo.name) ? <RepoItem repo={repo} key={repo.id} /> : ''\n\t));\n};\nRepos.propTypes = {\n\trepos: PropTypes.array.isRequired,\n};\nexport default Repos;\n","/Users/imseonghu/PycharmProjects/react_github_finders/src/components/repos/RepoItem.js",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":3,"column":10,"nodeType":"70","messageId":"71","endLine":3,"endColumn":16},{"ruleId":"68","severity":1,"message":"72","line":12,"column":8,"nodeType":"70","messageId":"71","endLine":12,"endColumn":13},{"ruleId":"68","severity":1,"message":"73","line":1,"column":17,"nodeType":"70","messageId":"71","endLine":1,"endColumn":26},{"ruleId":"68","severity":1,"message":"74","line":5,"column":8,"nodeType":"70","messageId":"71","endLine":5,"endColumn":17},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'render' is defined but never used.","Identifier","unusedVar","'About' is defined but never used.","'Component' is defined but never used.","'substring' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]